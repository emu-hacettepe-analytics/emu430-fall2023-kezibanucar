---
title: "Assignment 2"
---

# Assignment 2

First of all, I wrote the codes that put Turkish movies between 2010-2023 and before 2009 under a data frame as follows.

```{r}
library(rvest)
library(tidyverse)
library(dplyr)



after_2010 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"

before_2010 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"

movies_after_2010 <- read_html(after_2010)
movies_before_2010 <- read_html(before_2010)


title_names_a <- movies_after_2010 |> html_nodes('.ipc-title__text')
title_names_a <- html_text(title_names_a)
title_names_a <- tail(head(title_names_a,-1),-1)
title_names_a <- str_split(title_names_a, " ", n=2)
title_names_a <- unlist(lapply(title_name_a, function(x) {x[2]}))

year_a <-movies_after_2010|> html_nodes('.dli-title-metadata-item:nth-child(1)')
year_a <- html_text(year_a)
year_a <- as.numeric(year_a)

duration_a <- movies_after_2010|> html_nodes('.dli-title-metadata-item:nth-child(2)')
duration_a <- html_text(duration_a)
duration_a <- sapply(str_extract_all(duration_a, "\\d+"), function(x) {
  x1 <- as.numeric(x)
  if(length(x1)>1) x1[1]*60 + x1[2] else x1 })

rating_a <- movies_after_2010 |> html_nodes('.ratingGroup--imdb-rating')
rating_a <- html_text(rating_a)
rating_a <- as.numeric(substr(rating_a,1,3))


vote_a <- movies_after_2010|> html_nodes('.kRnqtn')
vote_a <- html_text(vote_a)
vote_a <- parse_number(vote_a)

title_names_b <- movies_before_2010 |> html_nodes('.ipc-title__text')
title_names_b <- html_text(title_names_b)
title_names_b <- tail(head(title_names_b,-1),-1)
title_names_b <- str_split(title_names_b, " ", n=2)
title_names_b <- unlist(lapply(title_names_b, function(x) {x[2]}))

movies_year_b <- movies_before_2010 |> html_nodes('.dli-title-metadata-item:nth-child(1)')
movies_year_b <- html_text(movies_year_b)
movies_year_b <- as.numeric(movies_year_b)

movies_duration_b <- movies_before_2010 |> html_nodes('.dli-title-metadata-item:nth-child(2)')
movies_duration_b <- html_text(movies_duration_b)
movies_duration_b <- sapply(str_extract_all(movies_duration_b, "\\d+"), function(x) {
  x1 <- as.numeric(x)
  if(length(x1)>1) x1[1]*60 + x1[2] else x1 })

movies_rating_b <- movies_before_2010 |> html_nodes('.ratingGroup--imdb-rating')
movies_rating_b <- html_text(movies_rating_b)
movies_rating_b <- as.numeric(substr(movies_rating_b,1,3))


movies_vote_b <- movies_before_2010 |> html_nodes('.kRnqtn')
movies_vote_b <- html_text(movies_vote_b)
movies_vote_b <- parse_number(movies_vote_b)


movies_title=c(title_names_a,title_names_b)
movies_rating=c(rating_a,movies_rating_b)
movies_year=c(year_a,movies_year_b)
movies_duration=c(duration_a,movies_duration_b)
movies_votes=c(vote_a,movies_vote_b)

Movies_all=data.frame(Title=movies_title, Year=movies_year,Duration=movies_duration,Rating=movies_rating,Votes=movies_votes)
```

Secondly, if there were no errors, I would write the first 5 and last 5 codes of all movies as follows.

```{r}
Movies_all%>%arrange(desc(movies_rating))%>%head(5)
Movies_all%>%arrange(desc(movies_rating))%>%tail(5)
```

I can show my favorite movie as follows.

```{r}
#for Babam ve Oğlum
movie_title <- "Babam ve Oğlum" 
movie_base <- Movies_all[Movies_all$Title == desired_movie_title, !(names(Movies_all) %in% "Rank")]
print(movie_base,movie_title)
```

Also, I can show the correlation of Votes and Rating

```{r}
correlation <- cor(movies_all$Votes,movies_all$Rating)
cat("Correlation between Votes and Rating", correlation, "\n")
ggplot(movies, aes(x = Rating, y = Votes)) +
  geom_point() +
  labs(x = "Rating of Movies", y = "Votes of Movies")
```

For the Top 1000 List

```{r}
first_1000<- "https://m.imdb.com/search/title/?title_type=feature&groups=top_1000&country_of_origin=TR&count=250"

turkish_first_1000 <- read_html(first_1000)
title_of_first_1000 <- turkish_top_1000 |> html_nodes('.ipc-title__text')
title_of_first_1000 <- html_text(title_of_first_1000)
title_of_first_1000 <- tail(head(title_of_first_1000,-1),-1)
title_of_first_1000 <- str_split(title_of_first_1000, " ", n=2)
title_of_first_1000 <- unlist(lapply(title_of_first_1000, function(x) {x[2]}))

year_of_first_100 <- turkish_top_1000 |> html_nodes('.dli-title-metadata-item:nth-child(1)')
year_of_first_100 <- html_text(year_of_first_100)
year_of_first_100 <- as.numeric(year_of_first_100)

turkish_df <- data.frame(
  Title = title_of_first_1000,
  Year = year_of_first_100
)
gathered <- inner_join(turkish_df, movies, by = c("Title" = "Title", "Year" = "Year"))
order_gathered <- gathered %>% arrange(Rating,desc(Rating))
```
