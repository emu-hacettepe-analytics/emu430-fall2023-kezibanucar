[
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "Our Course Project",
    "section": "",
    "text": "I’m honored to be a member of the [group name] project team.\nBelow, you’ll find a brief summary of our project. To access a detailed project description, please go to https://[your-project-url].\nSummary\n[provide a biref summary of your project]\n\n\n\n Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to My Analytics Lab",
    "section": "",
    "text": "Hello! My name is Keziban Uçar.\nThis is my personal webpage.\nPlease stay tuned to follow my works on data analytics, blog posts, and more.\nThis is our template.\n\n\n\n Back to top"
  },
  {
    "objectID": "assignments/assignment-2.html",
    "href": "assignments/assignment-2.html",
    "title": "Assignment 2",
    "section": "",
    "text": "Assignment 2\nFirst of all, I wrote the codes that put Turkish movies between 2010-2023 and before 2009 under a data frame as follows.\n\nlibrary(rvest)\n\nWarning: package 'rvest' was built under R version 4.3.2\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.3.2\n\n\nWarning: package 'tidyr' was built under R version 4.3.2\n\n\nWarning: package 'readr' was built under R version 4.3.2\n\n\nWarning: package 'purrr' was built under R version 4.3.2\n\n\nWarning: package 'forcats' was built under R version 4.3.2\n\n\nWarning: package 'lubridate' was built under R version 4.3.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter()         masks stats::filter()\n✖ readr::guess_encoding() masks rvest::guess_encoding()\n✖ dplyr::lag()            masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(dplyr)\n\n\n\nafter_2010 &lt;- \"https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250\"\n\nbefore_2010 &lt;- \"https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250\"\n\nmovies_after_2010 &lt;- read_html(after_2010)\nmovies_before_2010 &lt;- read_html(before_2010)\n\n\ntitle_names_a &lt;- movies_after_2010 |&gt; html_nodes('.ipc-title__text')\ntitle_names_a &lt;- html_text(title_names_a)\ntitle_names_a &lt;- tail(head(title_names_a,-1),-1)\ntitle_names_a &lt;- str_split(title_names_a, \" \", n=2)\ntitle_names_a &lt;- unlist(lapply(title_names_a, function(x) {x[2]}))\n\n\n\nyear_a &lt;-movies_after_2010|&gt; html_nodes('.dli-title-metadata-item:nth-child(1)')\nyear_a &lt;- html_text(year_a)\nyear_a &lt;- as.numeric(year_a)\n\nduration_a &lt;- movies_after_2010|&gt; html_nodes('.dli-title-metadata-item:nth-child(2)')\nduration_a &lt;- html_text(duration_a)\nduration_a &lt;- sapply(str_extract_all(duration_a, \"\\\\d+\"), function(x) {\n  x1 &lt;- as.numeric(x)\n  if(length(x1)&gt;1) x1[1]*60 + x1[2] else x1 })\n\nrating_a &lt;- movies_after_2010 |&gt; html_nodes('.ratingGroup--imdb-rating')\nrating_a &lt;- html_text(rating_a)\nrating_a &lt;- as.numeric(substr(rating_a,1,3))\n\n\nvote_a &lt;- movies_after_2010|&gt; html_nodes('.kRnqtn')\nvote_a &lt;- html_text(vote_a)\nvote_a &lt;- parse_number(vote_a)\n\ntitle_names_b &lt;- movies_before_2010 |&gt; html_nodes('.ipc-title__text')\ntitle_names_b &lt;- html_text(title_names_b)\ntitle_names_b &lt;- tail(head(title_names_b,-1),-1)\ntitle_names_b &lt;- str_split(title_names_b, \" \", n=2)\ntitle_names_b &lt;- unlist(lapply(title_names_b, function(x) {x[2]}))\n\nmovies_year_b &lt;- movies_before_2010 |&gt; html_nodes('.dli-title-metadata-item:nth-child(1)')\nmovies_year_b &lt;- html_text(movies_year_b)\nmovies_year_b &lt;- as.numeric(movies_year_b)\n\nmovies_duration_b &lt;- movies_before_2010 |&gt; html_nodes('.dli-title-metadata-item:nth-child(2)')\nmovies_duration_b &lt;- html_text(movies_duration_b)\nmovies_duration_b &lt;- sapply(str_extract_all(movies_duration_b, \"\\\\d+\"), function(x) {\n  x1 &lt;- as.numeric(x)\n  if(length(x1)&gt;1) x1[1]*60 + x1[2] else x1 })\n\nmovies_rating_b &lt;- movies_before_2010 |&gt; html_nodes('.ratingGroup--imdb-rating')\nmovies_rating_b &lt;- html_text(movies_rating_b)\nmovies_rating_b &lt;- as.numeric(substr(movies_rating_b,1,3))\n\n\nmovies_vote_b &lt;- movies_before_2010 |&gt; html_nodes('.kRnqtn')\nmovies_vote_b &lt;- html_text(movies_vote_b)\nmovies_vote_b &lt;- parse_number(movies_vote_b)\n\n\nmovies_title=c(title_names_a,title_names_b)\nmovies_rating=c(rating_a,movies_rating_b)\nmovies_year=c(year_a,movies_year_b)\nmovies_duration=c(duration_a,movies_duration_b)\nmovies_votes=c(vote_a,movies_vote_b)\n\nMovies_all=data.frame(Title=movies_title, Year=movies_year,Duration=movies_duration,Rating=movies_rating,Votes=movies_votes)\n\nSecondly, if there were no errors, I would write the first 5 and last 5 codes of all movies as follows.\n\nMovies_all%&gt;%arrange(desc(movies_rating))%&gt;%head(5)\n\n                         Title Year Duration Rating Votes\n1               Hababam Sinifi 1975       87    9.2 42513\n2       CM101MMXI Fundamentals 2013      139    9.1 46996\n3                   Tosun Pasa 1976       90    8.9 24329\n4 Hababam Sinifi Sinifta Kaldi 1975       95    8.9 24370\n5                Süt Kardesler 1976       80    8.8 20888\n\nMovies_all%&gt;%arrange(desc(movies_rating))%&gt;%tail(5)\n\n                             Title Year Duration Rating Votes\n466                 Cumali Ceber 2 2018      100    1.2 10229\n467                          Müjde 2022       48    1.2  9919\n468              15/07 Safak Vakti 2021       95    1.2 20608\n469 Cumali Ceber: Allah Seni Alsin 2017      100    1.0 39267\n470                           Reis 2017      108    1.0 73974\n\n\nI can show my favorite movie as follows.\n\nmovie_title &lt;- \"Yeralti\" \nmovie_base &lt;- Movies_all[Movies_all$Title ==movie_title, !(names(Movies_all) %in% \"Rank\")]\nprint(movie_base)\n\n     Title Year Duration Rating Votes\n37 Yeralti 2012      107    7.1 10083\n\n\nAlso, I can show the correlation of Votes and Rating\n\ncorrelation &lt;- cor(Movies_all$Votes,Movies_all$Rating)\ncat(\"Correlation between Votes and Rating\", correlation, \"\\n\")\n\nCorrelation between Votes and Rating 0.1307831 \n\nggplot(Movies_all, aes(x = Rating, y = Votes)) +\n  geom_point() +\n  labs(x = \"Rating of Movies\", y = \"Votes of Movies\")\n\n\n\n\nFor the Top 1000 List\n\nfirst_1000&lt;- \"https://m.imdb.com/search/title/?title_type=feature&groups=top_1000&country_of_origin=TR&count=250\"\n\nturkish_first_1000 &lt;- read_html(first_1000)\ntitle_of_first_1000 &lt;- turkish_first_1000 |&gt; html_nodes('.ipc-title__text')\ntitle_of_first_1000 &lt;- html_text(title_of_first_1000)\ntitle_of_first_1000 &lt;- tail(head(title_of_first_1000,-1),-1)\ntitle_of_first_1000 &lt;- str_split(title_of_first_1000, \" \", n=2)\ntitle_of_first_1000 &lt;- unlist(lapply(title_of_first_1000, function(x) {x[2]}))\n\nyear_of_first_100 &lt;- turkish_first_1000 |&gt; html_nodes('.dli-title-metadata-item:nth-child(1)')\nyear_of_first_100 &lt;- html_text(year_of_first_100)\nyear_of_first_100 &lt;- as.numeric(year_of_first_100)\n\nturkish_df &lt;- data.frame(\n  Title = title_of_first_1000,\n  Year = year_of_first_100\n)\ngathered &lt;- inner_join(turkish_df, Movies_all, by = c(\"Title\" = \"Title\", \"Year\" = \"Year\"))\norder_gathered &lt;- gathered %&gt;% arrange(Rating,desc(Rating))\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Before the summary information, you can see my CV if you click."
  },
  {
    "objectID": "about.html#employements",
    "href": "about.html#employements",
    "title": "About Me",
    "section": "Employements",
    "text": "Employements\n\nMackbear Coffee CO. , Barista, year 2021"
  },
  {
    "objectID": "about.html#internships",
    "href": "about.html#internships",
    "title": "About Me",
    "section": "Internships",
    "text": "Internships\n\nBaşkent Doğalgaz Dağıtım GYO. , Purchasing and Logistic Intern, year 2022"
  },
  {
    "objectID": "assignments/assignment-1.html",
    "href": "assignments/assignment-1.html",
    "title": "Assignment 1",
    "section": "",
    "text": "My first assignment has three parts."
  },
  {
    "objectID": "assignments.html",
    "href": "assignments.html",
    "title": "My Assignments",
    "section": "",
    "text": "On this page, I showcase the assignment I conducted for the Fall 2023 EMU 430 Data Analytics course.\nPlease use left menu to navigate through my assignments.\n\n\n\n Back to top"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "My Blog",
    "section": "",
    "text": "This page is under construction.\n\n\n\n Back to top"
  },
  {
    "objectID": "assignments/assignment-1.html#b-part",
    "href": "assignments/assignment-1.html#b-part",
    "title": "Assignment 1",
    "section": "B part",
    "text": "B part\nIn R programming, counting starts with 1. It starts with 0 in Python. While R programming uses the ‘&lt;-’ sign to make assignments, Python uses the ‘=’ sign. While R programming has direct function types such as apply and sapply, they do not exist in Python."
  },
  {
    "objectID": "assignments/assignment-1.html#a-part",
    "href": "assignments/assignment-1.html#a-part",
    "title": "Assignment 1",
    "section": "A part",
    "text": "A part\nFrom the selected videos, I chose the “Deploying a Shiny for Python application with Posit Connect” video. The main purpose of this video is to look at the process of distributing the Shiny for Python application from Posit. There is a Shiny for python application called Appy.py. Various packages are installed here to ensure workflow and distribute applications. After creating and running these codes, a URL appears. And deploys the shiny for Python implementation on Posit Connect. Then, after various codes are written and run again, the URL appears again. And this distributes the previous one to Posit Connect. Routes direct distribution to Posit Connect."
  },
  {
    "objectID": "assignments/assignment-1.html#c-part",
    "href": "assignments/assignment-1.html#c-part",
    "title": "Assignment 1",
    "section": "C part",
    "text": "C part\nFirstly, I show you data set.\n\nlibrary(dslabs)\ndata(na_example)\nprint(na_example)\n\n   [1]  2  1  3  2  1  3  1  4  3  2  2 NA  2  2  1  4 NA  1  1  2  1  2  2  1\n  [25]  2  5 NA  2  2  3  1  2  4  1  1  1  4  5  2  3  4  1  2  4  1  1  2  1\n  [49]  5 NA NA NA  1  1  5  1  3  1 NA  4  4  7  3  2 NA NA  1 NA  4  1  2  2\n  [73]  3  2  1  2  2  4  3  4  2  3  1  3  2  1  1  1  3  1 NA  3  1  2  2  1\n  [97]  2  2  1  1  4  1  1  2  3  3  2  2  3  3  3  4  1  1  1  2 NA  4  3  4\n [121]  3  1  2  1 NA NA NA NA  1  5  1  2  1  3  5  3  2  2 NA NA NA NA  3  5\n [145]  3  1  1  4  2  4  3  3 NA  2  3  2  6 NA  1  1  2  2  1  3  1  1  5 NA\n [169] NA  2  4 NA  2  5  1  4  3  3 NA  4  3  1  4  1  1  3  1  1 NA NA  3  5\n [193]  2  2  2  3  1  2  2  3  2  1 NA  2 NA  1 NA NA  2  1  1 NA  3 NA  1  2\n [217]  2  1  3  2  2  1  1  2  3  1  1  1  4  3  4  2  2  1  4  1 NA  5  1  4\n [241] NA  3 NA NA  1  1  5  2  3  3  2  4 NA  3  2  5 NA  2  3  4  6  2  2  2\n [265] NA  2 NA  2 NA  3  3  2  2  4  3  1  4  2 NA  2  4 NA  6  2  3  1 NA  2\n [289]  2 NA  1  1  3  2  3  3  1 NA  1  4  2  1  1  3  2  1  2  3  1 NA  2  3\n [313]  3  2  1  2  3  5  5  1  2  3  3  1 NA NA  1  2  4 NA  2  1  1  1  3  2\n [337]  1  1  3  4 NA  1  2  1  1  3  3 NA  1  1  3  5  3  2  3  4  1  4  3  1\n [361] NA  2  1  2  2  1  2  2  6  1  2  4  5 NA  3  4  2  1  1  4  2  1  1  1\n [385]  1  2  1  4  4  1  3 NA  3  3 NA  2 NA  1  2  1  1  4  2  1  4  4 NA  1\n [409]  2 NA  3  2  2  2  1  4  3  6  1  2  3  1  3  2  2  2  1  1  3  2  1  1\n [433]  1  3  2  2 NA  4  4  4  1  1 NA  4  3 NA  1  3  1  3  2  4  2  2  2  3\n [457]  2  1  4  3 NA  1  4  3  1  3  2 NA  3 NA  1  3  1  4  1  1  1  2  4  3\n [481]  1  2  2  2  3  2  3  1  1 NA  3  2  1  1  2 NA  2  2  2  3  3  1  1  2\n [505] NA  1  2  1  1  3  3  1  3  1  1  1  1  1  2  5  1  1  2  2  1  1 NA  1\n [529]  4  1  2  4  1  3  2 NA  1  1 NA  2  1  1  4  2  3  3  1  5  3  1  1  2\n [553] NA  1  1  3  1  3  2  4 NA  2  3  2  1  2  1  1  1  2  2  3  1  5  2 NA\n [577]  2 NA  3  2  2  2  1  5  3  2  3  1 NA  3  1  2  2  2  1  2  2  4 NA  6\n [601]  1  2 NA  1  1  2  2  3 NA  3  2  3  3  4  2 NA  2 NA  4 NA  1  1  2  2\n [625]  3  1  1  1  3 NA  2  5 NA  7  1 NA  4  3  3  1 NA  1  1  1  1  3  2  4\n [649]  2  2  3 NA NA  1  4  3  2  2  2  3  2  4  2  2  4 NA NA NA  6  3  3  1\n [673]  4  4  2  1 NA  1  6 NA  3  3  2  1  1  6 NA  1  5  1 NA  2  6  2 NA  4\n [697]  1  3  1  2 NA  1  1  3  1  2  4  2  1  3  2  4  3  2  2  1  1  5  6  4\n [721]  2  2  2  2  4 NA  1  2  2  2  2  4  5 NA NA NA  4  3  3  3  2  4  2  4\n [745] NA NA NA NA  2  1 NA  2  4  3  2 NA  2  3  1  3  4 NA  1  2  1  2 NA  3\n [769]  1  2  1  2  1  2  1  2  2  2  2  1  1  3  3  1  3  4  3 NA NA  4  2  3\n [793]  2  1  3  2  4  2  2  3  1  2  4  3  3  4 NA  1  4  2  1  1  1  3  1  5\n [817]  2  2  4  2 NA  1  3  1  2 NA  1  2  1  2  1 NA  1  3  2  3  2 NA  2  1\n [841]  4  2 NA NA NA  2  4  2 NA NA  3  1 NA  5  5  2  2  2 NA  2  1  3  1  3\n [865]  2  4  2  4 NA  4  1  2  3  2  3  3  2  3  2  2  2  1  3  2  4  2 NA  3\n [889]  3  2  2 NA NA  3  2  1  2  4  1  1  1  1  4  3  2 NA  3  2 NA  1 NA  3\n [913]  2  1  1  1  2 NA  2  2  3  3  2 NA NA  4  5  2  2  2  1  2  3  1  3  3\n [937]  4  3 NA  1  1  1 NA  4  3  5  1  1  2 NA  2  2  2  2  5  2  2  3  1  2\n [961]  3 NA  1  2 NA NA  2 NA  3  1  1  2  5  3  5  1  1  4 NA  2  1  3  1  1\n [985]  2  4  3  3  3 NA  1  1  2  2  1  1  2  2 NA  2\n\n\nAnd this is total number of NA\n\ntotal_number_na &lt;- sum(is.na(na_example))\nprint(total_number_na)\n\n[1] 145\n\n\nSecondly, I create new data set.\n\nnew_data_frame &lt;- na_example\nnew_data_frame[is.na(new_data_frame)] &lt;- 0 \nprint(new_data_frame)\n\n   [1] 2 1 3 2 1 3 1 4 3 2 2 0 2 2 1 4 0 1 1 2 1 2 2 1 2 5 0 2 2 3 1 2 4 1 1 1 4\n  [38] 5 2 3 4 1 2 4 1 1 2 1 5 0 0 0 1 1 5 1 3 1 0 4 4 7 3 2 0 0 1 0 4 1 2 2 3 2\n  [75] 1 2 2 4 3 4 2 3 1 3 2 1 1 1 3 1 0 3 1 2 2 1 2 2 1 1 4 1 1 2 3 3 2 2 3 3 3\n [112] 4 1 1 1 2 0 4 3 4 3 1 2 1 0 0 0 0 1 5 1 2 1 3 5 3 2 2 0 0 0 0 3 5 3 1 1 4\n [149] 2 4 3 3 0 2 3 2 6 0 1 1 2 2 1 3 1 1 5 0 0 2 4 0 2 5 1 4 3 3 0 4 3 1 4 1 1\n [186] 3 1 1 0 0 3 5 2 2 2 3 1 2 2 3 2 1 0 2 0 1 0 0 2 1 1 0 3 0 1 2 2 1 3 2 2 1\n [223] 1 2 3 1 1 1 4 3 4 2 2 1 4 1 0 5 1 4 0 3 0 0 1 1 5 2 3 3 2 4 0 3 2 5 0 2 3\n [260] 4 6 2 2 2 0 2 0 2 0 3 3 2 2 4 3 1 4 2 0 2 4 0 6 2 3 1 0 2 2 0 1 1 3 2 3 3\n [297] 1 0 1 4 2 1 1 3 2 1 2 3 1 0 2 3 3 2 1 2 3 5 5 1 2 3 3 1 0 0 1 2 4 0 2 1 1\n [334] 1 3 2 1 1 3 4 0 1 2 1 1 3 3 0 1 1 3 5 3 2 3 4 1 4 3 1 0 2 1 2 2 1 2 2 6 1\n [371] 2 4 5 0 3 4 2 1 1 4 2 1 1 1 1 2 1 4 4 1 3 0 3 3 0 2 0 1 2 1 1 4 2 1 4 4 0\n [408] 1 2 0 3 2 2 2 1 4 3 6 1 2 3 1 3 2 2 2 1 1 3 2 1 1 1 3 2 2 0 4 4 4 1 1 0 4\n [445] 3 0 1 3 1 3 2 4 2 2 2 3 2 1 4 3 0 1 4 3 1 3 2 0 3 0 1 3 1 4 1 1 1 2 4 3 1\n [482] 2 2 2 3 2 3 1 1 0 3 2 1 1 2 0 2 2 2 3 3 1 1 2 0 1 2 1 1 3 3 1 3 1 1 1 1 1\n [519] 2 5 1 1 2 2 1 1 0 1 4 1 2 4 1 3 2 0 1 1 0 2 1 1 4 2 3 3 1 5 3 1 1 2 0 1 1\n [556] 3 1 3 2 4 0 2 3 2 1 2 1 1 1 2 2 3 1 5 2 0 2 0 3 2 2 2 1 5 3 2 3 1 0 3 1 2\n [593] 2 2 1 2 2 4 0 6 1 2 0 1 1 2 2 3 0 3 2 3 3 4 2 0 2 0 4 0 1 1 2 2 3 1 1 1 3\n [630] 0 2 5 0 7 1 0 4 3 3 1 0 1 1 1 1 3 2 4 2 2 3 0 0 1 4 3 2 2 2 3 2 4 2 2 4 0\n [667] 0 0 6 3 3 1 4 4 2 1 0 1 6 0 3 3 2 1 1 6 0 1 5 1 0 2 6 2 0 4 1 3 1 2 0 1 1\n [704] 3 1 2 4 2 1 3 2 4 3 2 2 1 1 5 6 4 2 2 2 2 4 0 1 2 2 2 2 4 5 0 0 0 4 3 3 3\n [741] 2 4 2 4 0 0 0 0 2 1 0 2 4 3 2 0 2 3 1 3 4 0 1 2 1 2 0 3 1 2 1 2 1 2 1 2 2\n [778] 2 2 1 1 3 3 1 3 4 3 0 0 4 2 3 2 1 3 2 4 2 2 3 1 2 4 3 3 4 0 1 4 2 1 1 1 3\n [815] 1 5 2 2 4 2 0 1 3 1 2 0 1 2 1 2 1 0 1 3 2 3 2 0 2 1 4 2 0 0 0 2 4 2 0 0 3\n [852] 1 0 5 5 2 2 2 0 2 1 3 1 3 2 4 2 4 0 4 1 2 3 2 3 3 2 3 2 2 2 1 3 2 4 2 0 3\n [889] 3 2 2 0 0 3 2 1 2 4 1 1 1 1 4 3 2 0 3 2 0 1 0 3 2 1 1 1 2 0 2 2 3 3 2 0 0\n [926] 4 5 2 2 2 1 2 3 1 3 3 4 3 0 1 1 1 0 4 3 5 1 1 2 0 2 2 2 2 5 2 2 3 1 2 3 0\n [963] 1 2 0 0 2 0 3 1 1 2 5 3 5 1 1 4 0 2 1 3 1 1 2 4 3 3 3 0 1 1 2 2 1 1 2 2 0\n[1000] 2\n\n\nAnd I find total number of NA\n\ntotal_nas &lt;- sum(is.na(new_data_frame))\ncat(\"Total number of NAs in the new data frame:\", total_nas, \"\\n\")\n\nTotal number of NAs in the new data frame: 0 \n\n\n\nNote:\nI solved the relevant codes in the underlined parts of the C part with help from ChatGPT. In this help, I learned how to replace certain variables in the data with another variable and the use of the cat() function."
  }
]