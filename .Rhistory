install.packages("rmarkdown", dep = TRUE)
library("dslabs")
data(na_example)
print(na_example)
length(data(na_example)[NA])
length(na_example[NA])
apply(na_example, 1:2, NA <- 0)
apply(na_example, 1:2, "NA" <- 0)
for(i in na_example){
if(i <- NA)
print(0)
}
new_data_set <- for(i in na_example){
if(i <- NA){
print(0)
} else {
print(i)
}
}
new_data_set <- for(i in na_example[]){
if(i <- NA){
print(0)
} else {
print(i)
}
}
new_data_set <- for(i in na_example[1:2]){
if(i <- NA){
print(0)
} else {
print(i)
}
}
new_data_set<- if(i <- na_example[NA]){
print(0)
else {
new_data_set<- if(i <- na_example[NA]){
print(0)
}
new_data_set<- for(i in na_example[NA]){
print(0)
}
new_data_set<- for(i in na_example){
if(i <- na_example[NA]){
print(0)
}
}
new_data_set<- for(i in na_example){
apply(na_example[NA], 1:2, print(0))
}
new_data_set<- for(i in na_example){
apply(na_example[NA], 1:2, print("0"))
}
new_data_set<- for(i in na_example[NA]){
print(0)
}
mutate(na_example, for(i in na_example[NA]) print(0))
install.packages(dplyr)
mutate(na_example, for(i in na_example[NA]) print(0))
install.packages("dplyr")
mutate(na_example, for(i in na_example[NA]) print(0))
install.packages("dplyr")
library(dplyr)
mutate(na_example, for(i in na_example[NA]) print(0))
install.packages("dplyr")
library(dplyr)
mutate(na_example, for(i in na_example[NA]) {print(0)})
library(dplyr)
mutate(na_example, for(i in na_example[NA]) {print(0)})
fun <- for(i in na_example[NA]) {print(0)}
library(dplyr)
mutate(na_example,fun)
total_number_na <- sum(is.na(na_example))
print(total_number_na)
library(dplyr)
mutate(na_example, na_example[NA]= print(0))
new_data_frame <- na_example
new_data_frame[is.na(new_data_frame)] <- 0
print(new_data_frame)
library(dslabs)
data(na_example)
print(na_example)
new_data_frame <- na_example
new_data_frame[is.na(new_data_frame)] <- 0
print(new_data_frame)
total_number_zero <- sum(is.0(new_data_frame))
total_nas <- sum(is.na(new_df))
total_nas <- sum(is.na(new_data_frame))
cat("Total number of NAs in the new data frame:", total_nas, "\n")
# Load required libraries
library(tidyverse)
# Load required libraries
install.packages("tidyverse")
library(tidyverse)
library(rvest)
library(stringr)
# Define the URLs
urls <- c(
"https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250",
"https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
)
# Function to scrape data from IMDb
scrape_imdb_data <- function(url) {
# Read HTML content from the URL
page <- read_html(url)
# Extract data using CSS selectors
titles <- page |> html_nodes('.ipc-title__text') |> html_text() |> tail(head(., -1), -1)
years <- page |> html_nodes('.ipc-metadata-list-item__list-content-item') |> html_text() |> str_extract("\\d{4}")
durations <- page |> html_nodes('.ipc-metadata-list-item__list-content-item-child') |> html_text() |> str_replace_all("\\D", "")
ratings <- page |> html_nodes('.ipc-rating-star-small__star') |> html_text() |> as.numeric()
votes <- page |> html_nodes('.ipc-button__text') |> html_text() |> str_extract("\\d+")
# Convert durations to numeric values (total minutes)
durations <- str_split(durations, " ") |> lapply(function(x) sum(as.numeric(x) * c(60, 1))) |> unlist()
# Create a data frame
data_frame <- data.frame(
Title = titles,
Year = as.numeric(years),
Duration = durations,
Rating = ratings,
Votes = as.numeric(votes)
)
return(data_frame)
}
# Loop through the URLs and scrape data
result_df <- purrr::map_dfr(urls, scrape_imdb_data)
